1.working directory
getwd()
setwd("/home/marco/Escritorio/DataMining-master/MachineLearning/LogisticRegression")
getwd()


2.We import the data set in which we will work
dataset <- read.csv('Social_Network_Ads.csv')
dataset <- dataset[, 3:5]


3. Splitting the dataset into the Training set and Test set

library(caTools)
set.seed(123)
split <- sample.split(dataset$Purchased, SplitRatio = 0.75) 
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)

    A 'seed' is used to randomize data selection during data division (75% for training and 25% for testing).

4. Feature scaling

training_set[, 1:2] <- scale(training_set[, 1:2])
test_set[, 1:2] <- scale(test_set[, 1:2])

    scale is generic function whose default method centers and/or scales the columns of a numeric matrix.
    In other words, scale is used to transform (to base logarithm e) and give a scaled meaning to the data to be used, in this case we indicate that we only want to apply the changes to columns 1 and 2 ([, 1:2]).

5. Fitting Logistic Regression to Training set

classifier = glm(formula = Purchased ~ .,
                 family = binomial,
                 data = training_set)

    glm is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution.








6. Predicting the Test set results

prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred

y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred

    predict is a generic function for predictions from the results of various model fitting functions.
    To make the prediction we need to call the classifier created in the previous step, which contains the object for which we want to make the prediction.
    The type of prediction, in this case response, is also specified so that the scale adjusts to that of the response variable.
    And finally, it indicates where the variables will be obtained with which the prediction will be made, in this case all the test_set except column 3 (test_set[-3]).
    In other words, predict calculates the probabilities of a prediction, in this case how likely is the result to be equal to 1 or 0.

    ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no depending on whether the element of test is TRUE or FALSE.
